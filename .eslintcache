[{"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\index.js":"1","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\App.js":"2","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\reportWebVitals.js":"3","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\sidebarItem\\sidebarItem.js":"4","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\Messenger.js":"5","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Sidebar\\Sidebar.js":"6","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarItem\\SidebarItem.js":"7","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Message\\Message.js":"8","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ChatInputField\\ChatInputField.js":"9","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\ErrorMessage\\ErrorMessage.js":"10","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Spinner\\Spinner.js":"11","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\LoginForm\\LoginForm.js":"12","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Navbar\\Navbar.js":"13","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\reducers\\reducer.js":"14","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actionTypes.js":"15","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\index.js":"16","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actions.js":"17","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\MyProfile\\MyProfile.js":"18","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ProfileDetails\\ProfileDetails.js":"19","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Utilities\\UtilityFunction.js":"20","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarInputField\\SidebarInputField.js":"21"},{"size":1023,"mtime":1610486398781,"results":"22","hashOfConfig":"23"},{"size":634,"mtime":1610630132086,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1606559614101,"results":"25","hashOfConfig":"23"},{"size":307,"mtime":1610126305415,"results":"26","hashOfConfig":"23"},{"size":13695,"mtime":1610902067067,"results":"27","hashOfConfig":"23"},{"size":1434,"mtime":1610902282122,"results":"28","hashOfConfig":"23"},{"size":548,"mtime":1610638453133,"results":"29","hashOfConfig":"23"},{"size":745,"mtime":1610275529165,"results":"30","hashOfConfig":"23"},{"size":1069,"mtime":1610828427735,"results":"31","hashOfConfig":"23"},{"size":3016,"mtime":1610897445111,"results":"32","hashOfConfig":"23"},{"size":169,"mtime":1610287636849,"results":"33","hashOfConfig":"23"},{"size":4381,"mtime":1610828778770,"results":"34","hashOfConfig":"23"},{"size":2147,"mtime":1610871946672,"results":"35","hashOfConfig":"23"},{"size":650,"mtime":1610479937463,"results":"36","hashOfConfig":"23"},{"size":90,"mtime":1610478299284,"results":"37","hashOfConfig":"23"},{"size":85,"mtime":1610478307951,"results":"38","hashOfConfig":"23"},{"size":336,"mtime":1610478293708,"results":"39","hashOfConfig":"23"},{"size":4098,"mtime":1610842577108,"results":"40","hashOfConfig":"23"},{"size":624,"mtime":1610567944022,"results":"41","hashOfConfig":"23"},{"size":237,"mtime":1610828582789,"results":"42","hashOfConfig":"23"},{"size":905,"mtime":1610833356371,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"18kyv50",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"56","usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"59","usedDeprecatedRules":"46"},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"46"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"76","usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"93"},"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\index.js",[],["94","95"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\App.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\reportWebVitals.js",[],["96","97"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\sidebarItem\\sidebarItem.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\Messenger.js",["98","99","100","101","102"],"import React, { Component } from \"react\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport Message from \"../../components/Message/Message\";\r\nimport InputField from \"../../components/UI/ChatInputField/ChatInputField\";\r\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport Navbar from \"../../components/Navbar/Navbar\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport classes from \"./Messenger.module.css\";\r\n\r\nexport class Messenger extends Component {\r\n  // data - chatting data that is received from backend\r\n  // by default, when first loads,\r\n  // messenger displays first chat (received from backend data array) in Messaging section\r\n  // therefore selectedChat by default is 0\r\n  // newMessage - this is text that user types in input field\r\n  // errorLoadingChats - HTTP GET request error\r\n  // errorSendingMessage - HTTP POST request error\r\n\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   this.exploreOurProductsRef = React.createRef();\r\n  //   this.todaySpecialRef = React.createRef();\r\n  //   this.lastMessageRef = React.createRef();\r\n  // }\r\n\r\n  state = {\r\n    data: null,\r\n    selectedChat: 0,\r\n    newMessage: \"\",\r\n    newContact: \"\",\r\n    errorLoadingChats: null,\r\n    errorSendingMessage: null,\r\n    errorAddingContact:null,\r\n    showSidebar: true,\r\n    isMounted: false\r\n  };\r\n\r\n  // scrollToLastMessage = () => {\r\n  //  console.log('scrolling to last message');\r\n  //   window.scrollTo(0, this.lastMessageRef)\r\n  // } \r\n\r\n  chatsDataGetRequest = () => {\r\n    let req = new XMLHttpRequest();\r\n    req.onreadystatechange = () => {\r\n      if (req.readyState == XMLHttpRequest.DONE) {\r\n        let dataUpdated = [];\r\n        if (req.status == 200) {\r\n          dataUpdated = [...JSON.parse(req.responseText)[\"data\"]];\r\n        }\r\n        this.checkRequestStatusUpdateState(\r\n          req,\r\n          dataUpdated,\r\n          \"errorLoadingChats\",\r\n          \"do not clear input\"\r\n        );\r\n      }\r\n    };\r\n\r\n    req.open(\"GET\", process.env.REACT_APP_GET_SIDEBAR_CHATS, true);\r\n    req.setRequestHeader(\"secret-key\", process.env.REACT_APP_API_KEY);\r\n    req.send();\r\n  };\r\n\r\n  sendPutRequest = (newData, clearInput, updateError) => {\r\n    let newDataObj = {\r\n      data: newData,\r\n    };\r\n\r\n    let newDataJson = JSON.stringify(newDataObj);\r\n    let req = new XMLHttpRequest();\r\n\r\n    req.onreadystatechange = () => {\r\n      if (req.readyState == XMLHttpRequest.DONE) {\r\n        this.checkRequestStatusUpdateState(\r\n          req,\r\n          newData,\r\n          updateError,\r\n          clearInput\r\n        );\r\n      }\r\n    };\r\n\r\n    req.open(\"PUT\", process.env.REACT_APP_GET_SIDEBAR_CHATS, true);\r\n    req.setRequestHeader(\"Content-Type\", \"application/json\");\r\n    req.setRequestHeader(\"versioning\", \"false\");\r\n    req.setRequestHeader(\"secret-key\", process.env.REACT_APP_API_KE);\r\n    req.send(newDataJson);\r\n  };\r\n\r\n  // when component mounts,\r\n  // componnetDidMount sends HTTP request to get\r\n  // chatting data (contact names and chats) from backend,\r\n  // chatting data is then saved as this.state.data.\r\n\r\n  // this.sendContinuousRequestsUpdateChats function is used for updating this.state.data\r\n  // and chat UI if there are any new messages sent by other users. It is set to execute every 2s.\r\n  // this.sendContinuousRequestsUpdateChats is eliminated, when Messenger component unmounts.\r\n  // currently this.sendContinuousRequestsUpdateChats  and componentWillUnmount are commented\r\n  // to prevent exceeding amount of free requests of JSONbin.io\r\n  componentDidMount() {\r\n    //this.scrollToBottom();\r\n    // if(this.state.data!=null){this.scrollToLastMessage()};\r\n    this.chatsDataGetRequest();\r\n    //  this.sendContinuousRequestsUpdateChats = setInterval(() => {\r\n    //   this.chatsDataGetRequest();\r\n    // }, 2000);\r\n  }\r\n\r\n  componentWillUnmount() {\r\n  //  clearInterval(this.sendContinuousRequestsUpdateChats);\r\n\r\n  }\r\n\r\n  // scrolls to latest messages in chat\r\n  // componentDidUpdate() {\r\n  //   if(this.state.errorLoadingChats==\"\"){\r\n  //     this.scrollToBottom();\r\n  //   }\r\n\r\n  // }\r\n\r\n  checkRequestStatusUpdateState = (req, newData, error, clearInput) => {\r\n    // if request status !=200 , this.state.data does not update, this.state.error updates\r\n    // when fetching data from backend, emptying user's input fields in UI is undesirable\r\n    // when sending new text message, we want to set this.state.newMessage=\"\"\r\n    // after new contact is added, we want to set this.state.newContact=\"\"\r\n    if (req.status !== 200) {\r\n      this.setState({ [error]: JSON.parse(req.response).message });\r\n    } else if (clearInput == \"do not clear input\") {\r\n      this.setState({\r\n        data: newData,\r\n        [error]: null,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        data: newData,\r\n        [clearInput]: \"\",\r\n        [error]: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  // when user clicks on a contact name in the Sidebar,\r\n  // selectChat function updates selectedChat property in state\r\n  // therefore, messagingSection array\r\n  // updates and displays chat with selected user\r\n  selectChat = (index) => {\r\n    this.setState({ selectedChat: index });\r\n    // this.scrollToLastMessage();\r\n\r\n    // when this.state.showSidebar is false,\r\n    // Sidebar is assigned CSS class with display: none property\r\n    //this function hides sidebar on mobile devices\r\n    this.hideSidebar();\r\n  };\r\n\r\n  // updates newMessage property in state object\r\n  // when user starts typing new message into InputField\r\n  inputChangedHandler = (event, inputName) => {\r\n    event.preventDefault();\r\n    this.setState({ [inputName]: event.target.value });\r\n  };\r\n\r\n  // function for creating timestamps that are used as\r\n  // IDs for new nessages\r\n  createTimeStamp = () => {\r\n    let now = new Date();\r\n    let timestamp = now.getFullYear().toString();\r\n    timestamp += (now.getMonth < 9 ? \"0\" : \"\") + now.getMonth().toString() + 1; // JS months are 0-based\r\n    timestamp += (now.getDate() < 10 ? \"0\" : \"\") + now.getDate().toString();\r\n    timestamp += (now.getHours < 10 ? \"0\" : \"\") + now.getHours().toString();\r\n    timestamp +=\r\n      (now.getMinutes() < 10 ? \"0\" : \"\") + now.getMinutes().toString();\r\n    timestamp +=\r\n      (now.getSeconds() < 10 ? \"0\" : \"\") + now.getSeconds().toString();\r\n\r\n    if (now.getMilliseconds() < 10) {\r\n      timestamp += \"00\" + now.getMilliseconds().toString();\r\n    } else if (now.getMilliseconds() < 100) {\r\n      timestamp += \"0\" + now.getMilliseconds().toString();\r\n    } else {\r\n      timestamp += now.getMilliseconds().toString();\r\n    }\r\n\r\n    return timestamp;\r\n  };\r\n\r\n  //checks if this.state.newMessage is not empty, updates backend and UI\r\n  sendMessage = () => {\r\n    if (this.state.newMessage && !this.state.errorSendingMessage) {\r\n      let timestamp = this.createTimeStamp();\r\n      let newMessageObj = {\r\n        messageText: this.state.newMessage,\r\n        author: \"me\",\r\n        date: timestamp,\r\n      };\r\n\r\n      let newData = JSON.parse(JSON.stringify(this.state.data));\r\n      let contactName = Object.keys(this.state.data[this.state.selectedChat]);\r\n      newData[this.state.selectedChat][contactName].push(newMessageObj);\r\n\r\n      this.sendPutRequest(newData, \"newMessage\", \"errorSendingMessage\");\r\n    }\r\n  };\r\n\r\n  //checks if this.state.newContact is not empty, updates backend and UI\r\n  addNewContact = () => {\r\n    if (this.state.newContact !== \"\") {\r\n      let newData = JSON.parse(JSON.stringify(this.state.data));\r\n      let newContactData = { [this.state.newContact]: [] };\r\n      newData.splice(0, 0, newContactData);\r\n      this.sendPutRequest(newData, \"newContact\", \"errorAddingContact\");\r\n    }\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView();\r\n  };\r\n\r\n  resetError = (errorType) => {\r\n    console.log(\"resetError\");\r\n    this.setState({ [errorType]: null });\r\n  };\r\n\r\n  showSidebarFunction = () => {\r\n    this.setState({ showSidebar: true });\r\n  };\r\n\r\n  hideSidebar = () => {\r\n    this.setState({ showSidebar: false });\r\n  };\r\n\r\n  render() {\r\n    // in the Sidebar, messenger contacts are being displayed\r\n    // Sidebar is on the left of the page.\r\n    // Messaging section (that contains chat with selected contact)\r\n    // is being displayed on the right side of the page\r\n\r\n    console.log(this.state.errorSendingMessage);\r\n\r\n    let messagingSection = [];\r\n\r\n    if (this.state.data !== null) {\r\n      let chat = [\r\n        ...Object.values(this.state.data[this.state.selectedChat])[0],\r\n      ];\r\n      chat.map((chatItem, index) =>\r\n        messagingSection.push(\r\n          <Message\r\n            author={chatItem.author}\r\n            messageText={chatItem.messageText}\r\n            key={index}\r\n          />\r\n        )\r\n      );\r\n    }\r\n\r\n    let chat = null;\r\n\r\n    // user logs in by providing email and password\r\n    // if user tries to access Messenger component\r\n    // without logging in first,\r\n    // user is being redirected to LoginForm component\r\n\r\n    let redirectToLogin = null;\r\n    if (!this.props.email || !this.props.password) {\r\n      redirectToLogin = <Redirect to=\"/\" />;\r\n    }\r\n\r\n    // If chats data is fetched from backend into state,\r\n    // messenger componnet displays chats.\r\n    // <div ref={(el) => {this.messagesEnd = el; }}  ></div> - this is a dummy div which is used for scrolling down to the end of chat\r\n\r\n    // checking if component is mounted prevents React state update on an unmounted component\r\n    let scrollToDiv = null;\r\n\r\n    if(this.state.data!=null){\r\n     scrollToDiv= <div  ref={this.lastMessageRef}  ></div>\r\n    }\r\n\r\n\r\n      // scrollToDiv = (\r\n      //   <div\r\n      //     ref={(el) => {\r\n      //       this.messagesEnd = el;\r\n      //     }}\r\n      //   ></div>\r\n      // );\r\n\r\n          \r\n    \r\n\r\n    if (this.state.data !== null) {\r\n      chat = (\r\n        <div>\r\n          <div className={classes.chatComponent}>\r\n            <div\r\n              className={\r\n                this.state.showSidebar\r\n                  ? `${classes.sidebar} ${classes.sidebarPhoneDisplay}`\r\n                  : `${classes.sidebar} ${classes.sidebarPhoneNone}`\r\n              }\r\n            >\r\n              <div className={classes.navbarOfSidbarForMobile}>\r\n                <Navbar\r\n                  navigateTo={\"/myProfile\"}\r\n                  chatWith={\r\n                    Object.keys(this.state.data[this.state.selectedChat])[0]\r\n                  }\r\n                  showSidebarProperty={this.state.showSidebar}\r\n                  showSidebarFunction={this.showSidebarFunction}\r\n                />\r\n              </div>\r\n              <Sidebar\r\n                data={this.state.data}\r\n                selectChat={this.selectChat}\r\n                selectedChat={this.state.selectedChat}\r\n                inputChangedHandler={this.inputChangedHandler}\r\n                newContact={this.state.newContact}\r\n                addNewContact={this.addNewContact}\r\n                errorAddingContact={this.state.errorAddingContact}\r\n                resetError={this.resetError}\r\n                errorType={\"errorAddingContact\"}\r\n              />\r\n            </div>\r\n\r\n            <div\r\n              className={\r\n                this.state.showSidebar\r\n                  ? `${classes.messagingSection} ${classes.messagingSectionPhoneNone}`\r\n                  : `${classes.messagingSection} ${classes.messagingSectionPhoneDisplay}`\r\n              }\r\n            >\r\n              <Navbar\r\n                navigateTo={\"/myProfile\"}\r\n                chatWith={\r\n                  Object.keys(this.state.data[this.state.selectedChat])[0]\r\n                }\r\n                showSidebarProperty={this.state.showSidebar}\r\n                showSidebarFunction={this.showSidebarFunction}\r\n              />\r\n              <div className={`${classes.messagingSectionMessages} `}>\r\n\r\n                {messagingSection}\r\n                {/* <div  ref={this.lastMessageRef}  ></div> */}\r\n                <div  >test</div>\r\n\r\n                <ErrorMessage\r\n                  error={this.state.errorSendingMessage}\r\n                  resetError={this.resetError}\r\n                  errorType={\"errorSendingMessage\"}\r\n                />\r\n              </div>\r\n              <InputField\r\n                inputChangedHandler={(event) =>\r\n                  this.inputChangedHandler(event, \"newMessage\")\r\n                }\r\n                sendMessage={this.sendMessage}\r\n                newMessage={this.state.newMessage}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    // if chats data is not yet fetched from backend into state,\r\n    // messenger componnet displays spinner\r\n    if (this.state.data == null && !this.state.errorLoadingChats) {\r\n      chat = <Spinner />;\r\n    }\r\n\r\n    // if chats data was not fetched from backend into state\r\n    // (server responded with status code which is not 200)\r\n    // messenger componnet displays Error message\r\n    if (this.state.errorLoadingChats) {\r\n      chat = (\r\n        <div>\r\n          <Navbar navigateTo={\"/myProfile\"} showSidebarProperty={true} />\r\n          <div className={classes.loadingChatsError}>\r\n            {\" \"}\r\n            <ErrorMessage\r\n              error={this.state.errorLoadingChats}\r\n              errorType={\"errorLoadingChats\"}\r\n            />\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {redirectToLogin}\r\n        {chat}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    email: state.email,\r\n    password: state.password,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Messenger);\r\n","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Sidebar\\Sidebar.js",["103"],"import React from \"react\";\r\nimport SidebarItem from \"../UI/SidebarItem/SidebarItem\";\r\nimport SidebarInputField from \"../UI/SidebarInputField/SidebarInputField\";\r\nimport ErrorMessage from \"../ErrorMessage/ErrorMessage\";\r\n\r\nexport const sidebar = (props) => {\r\n  // sidebar stateless component gets chatting data (as a prop)\r\n  // from Messenger stateful component,\r\n  // extracts contact names and uses SidebarItem stateless component to\r\n  // display contact names in Sidebar on the left of the page\r\n\r\n  let chats = [];\r\n  let thisIsSelectedChat = false;\r\n  if (props.data.length > 0) {\r\n    for (let i = 0; i < props.data.length; i++) {\r\n      if (props.selectedChat == i) {\r\n        thisIsSelectedChat = true;\r\n      }\r\n      chats.push(\r\n        <SidebarItem\r\n          key={i}\r\n          index={i}\r\n          contactName={Object.keys(props.data[i])[0]}\r\n          selectChat={props.selectChat}\r\n          selectedChat={thisIsSelectedChat}\r\n        />\r\n      );\r\n      thisIsSelectedChat = false;\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <ErrorMessage\r\n        error={props.errorAddingContact}\r\n        resetError={props.resetError}\r\n        errorType={\"errorAddingContact\"}\r\n      />\r\n      <SidebarInputField\r\n        inputChangedHandler={props.inputChangedHandler}\r\n        newContact={props.newContact}\r\n        addNewContact={props.addNewContact}\r\n      />\r\n      {chats}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default sidebar;\r\n","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarItem\\SidebarItem.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Message\\Message.js",["104"],"import React from \"react\";\r\nimport classes from \"./Message.module.css\";\r\n\r\nexport const message = (props) => {\r\n  // this component receives\r\n  // props from Messenger statefull component\r\n  // and displays single user message\r\n\r\n  let me;\r\n\r\n  props.author == \"me\" ? (me = true) : (me = false);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        me\r\n          ? `${classes.textDiv} ${classes.myTextDiv}`\r\n          : `${classes.textDiv} ${classes.notMyTextDiv}`\r\n      }\r\n    >\r\n      <div\r\n        className={\r\n          me\r\n            ? `${classes.text} ${classes.myText}`\r\n            : `${classes.text} ${classes.notMyText}`\r\n        }\r\n      >\r\n        {props.messageText}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default message;\r\n","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ChatInputField\\ChatInputField.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\ErrorMessage\\ErrorMessage.js",["105","106","107"],"import React from \"react\";\r\nimport classes from \"./ErrorMessage.module.css\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faTimesCircle } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nexport const errorMessage = (props) => {\r\n  console.log(props.error);\r\n  let error = null;\r\n  if (props.error) {\r\n    error = props.error;\r\n  }\r\n\r\n  if(props.error && (props.errorType=='errorSendingMessage' || props.errorType=='errorAddingContact' || props.errorType=='warning')){\r\n    setTimeout(() => props.resetError(props.errorType), 2000);\r\n  }\r\n\r\n  // if(props.error && props.errorType=='warning'){\r\n  //   setTimeout(() => props.resetError(), 2000);\r\n  // }\r\n\r\n  console.log(props);\r\n\r\n  switch (props.errorType) {\r\n    // shows error message when HTTP GET request fails to get chats from backend ( request status is !==200)\r\n    // in Messenger's statefull componnet componentDidMount\r\n    case \"errorLoadingChats\":\r\n      return (\r\n        <div\r\n          className={\r\n            props.error ? `${classes.alertItemLogin} ${classes.alertItemLoginError}` : `${classes.inactiveLogin}`\r\n          }\r\n        >\r\n          <div className={classes.data}>\r\n            <p className={classes.title}>\r\n              <span>Error</span>\r\n            </p>\r\n            <p className={classes.sub}>{error ? error : undefined}</p>\r\n            <p>Please contact our support team </p>\r\n          </div>\r\n\r\n        </div>\r\n      );\r\n\r\n      // shows error message in chat, when new message was not sent (HTTP PUT request status !==200)\r\n      case \"errorSendingMessage\":\r\n        console.log('errorsendingmsg');\r\n      return (\r\n        <div className={props.error ? classes.alertItemSendingMessage : classes.inactiveAlertItemSendingMessage}>\r\n        Message not sent\r\n      </div>\r\n      );\r\n\r\n      // shows error message in chat, when new contact was not successfully added (HTTP PUT request status !==200)\r\n      case \"errorAddingContact\":\r\n        console.log('error adding contact');\r\n      return (\r\n        <div className={props.error ? classes.alertItemSendingMessage : classes.inactiveAlertItemSendingMessage}>\r\n        Contact not added\r\n      </div>\r\n      );\r\n\r\n\r\n      // shows error message (warning) when user tries to login \r\n      // without providing email and password\r\n    case \"warning\":\r\n      return (\r\n        <div\r\n          className={\r\n            props.error\r\n              ? `${classes.alertItemLogin} ${classes.warning}`\r\n              : `${classes.inactiveLogin}`\r\n          }\r\n        >\r\n          <div className={classes.data}>\r\n            <p className={classes.title}>\r\n              <span>Warning</span>\r\n            </p>\r\n            <p className={classes.sub}>{error ? error : undefined}</p>\r\n          </div>\r\n\r\n          <FontAwesomeIcon\r\n            icon={faTimesCircle}\r\n            className={classes.close}\r\n            onClick={props.resetError}\r\n          />\r\n        </div>\r\n      );\r\n\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport default errorMessage;\r\n","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Spinner\\Spinner.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\LoginForm\\LoginForm.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Navbar\\Navbar.js",["108","109","110"],"import React from \"react\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { faComments } from '@fortawesome/free-solid-svg-icons';\r\nimport { faUser } from '@fortawesome/free-solid-svg-icons';\r\nimport { faBook } from '@fortawesome/free-solid-svg-icons';\r\nimport * as actions from '../../store/actions/index';\r\nimport {connect} from 'react-redux';\r\nimport { NavLink } from 'react-router-dom'\r\nimport classes from \"./Navbar.module.css\";\r\n\r\nexport const navbar = (props) => {\r\n  // navbar component is used in Messenger and in MyProfile components\r\n  // from navbar in messenger user can navigate to MyProfile\r\n  // from nabar in MyProfile user can navigate to messenger\r\n  // navbar updates its UI when it receives navigateTo prop\r\n\r\n  let navButtonForMobileDevice=null;\r\n  // chatWith - name of contact that user is currently chatting with \r\n  // is displayed in Messenger component NavBar\r\n  let chatWith=null;\r\n  let chooseIcon =null;\r\n\r\n  if(props.navigateTo=='/myProfile'){\r\n    chooseIcon = faUser \r\n    if(props.showSidebarProperty){\r\n      navButtonForMobileDevice=null;\r\n    }else{\r\n      navButtonForMobileDevice=<div className={classes.showButton} onClick={props.showSidebarFunction}><FontAwesomeIcon icon={faBook}/></div>\r\n    }\r\n    chatWith=<div className={classes.chatWith}>{props.chatWith}</div>\r\n  }\r\n\r\n  if(props.navigateTo=='/messenger'){\r\n    chooseIcon=faComments\r\n  }\r\n\r\n  return (\r\n    <div className={props.navigateTo==\"/messenger\" ? `${classes.navbar} ${classes.navbarMyProfile}` : classes.navbar }>\r\n      {chatWith}\r\n      {navButtonForMobileDevice}\r\n      <NavLink to={props.navigateTo}><div className={`${classes.myProfile} ${classes.button}`}><FontAwesomeIcon icon={chooseIcon}/></div></NavLink>\r\n            <div ><FontAwesomeIcon icon={faSignOutAlt} className={`${classes.logout} ${classes.button}`} onClick={props.onLogout}/></div>\r\n   </div>\r\n  );\r\n};\r\n\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n  return{\r\n      onLogout: ()=>dispatch(actions.logout())\r\n  }\r\n}\r\n\r\nexport default connect(null, mapDispatchToProps)(navbar);","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\reducers\\reducer.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\index.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actions.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\MyProfile\\MyProfile.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ProfileDetails\\ProfileDetails.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Utilities\\UtilityFunction.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarInputField\\SidebarInputField.js",[],["111","112"],{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","replacedBy":"116"},{"ruleId":"113","replacedBy":"117"},{"ruleId":"115","replacedBy":"118"},{"ruleId":"119","severity":1,"message":"120","line":48,"column":26,"nodeType":"121","messageId":"122","endLine":48,"endColumn":28},{"ruleId":"119","severity":1,"message":"120","line":50,"column":24,"nodeType":"121","messageId":"122","endLine":50,"endColumn":26},{"ruleId":"119","severity":1,"message":"120","line":76,"column":26,"nodeType":"121","messageId":"122","endLine":76,"endColumn":28},{"ruleId":"119","severity":1,"message":"120","line":132,"column":27,"nodeType":"121","messageId":"122","endLine":132,"endColumn":29},{"ruleId":"123","severity":1,"message":"124","line":281,"column":6,"nodeType":"125","messageId":"126","endLine":281,"endColumn":17},{"ruleId":"119","severity":1,"message":"120","line":16,"column":30,"nodeType":"121","messageId":"122","endLine":16,"endColumn":32},{"ruleId":"119","severity":1,"message":"120","line":11,"column":16,"nodeType":"121","messageId":"122","endLine":11,"endColumn":18},{"ruleId":"119","severity":1,"message":"120","line":13,"column":37,"nodeType":"121","messageId":"122","endLine":13,"endColumn":39},{"ruleId":"119","severity":1,"message":"120","line":13,"column":79,"nodeType":"121","messageId":"122","endLine":13,"endColumn":81},{"ruleId":"119","severity":1,"message":"120","line":13,"column":120,"nodeType":"121","messageId":"122","endLine":13,"endColumn":122},{"ruleId":"119","severity":1,"message":"120","line":24,"column":22,"nodeType":"121","messageId":"122","endLine":24,"endColumn":24},{"ruleId":"119","severity":1,"message":"120","line":34,"column":22,"nodeType":"121","messageId":"122","endLine":34,"endColumn":24},{"ruleId":"119","severity":1,"message":"120","line":39,"column":37,"nodeType":"121","messageId":"122","endLine":39,"endColumn":39},{"ruleId":"113","replacedBy":"127"},{"ruleId":"115","replacedBy":"128"},"no-native-reassign",["129"],"no-negated-in-lhs",["130"],["129"],["130"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-unused-vars","'scrollToDiv' is assigned a value but never used.","Identifier","unusedVar",["129"],["130"],"no-global-assign","no-unsafe-negation"]