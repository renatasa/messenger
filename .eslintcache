[{"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\index.js":"1","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\App.js":"2","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\reportWebVitals.js":"3","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\sidebarItem\\sidebarItem.js":"4","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\Messenger.js":"5","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Sidebar\\Sidebar.js":"6","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarItem\\SidebarItem.js":"7","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Message\\Message.js":"8","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ChatInputField\\ChatInputField.js":"9","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\Buttons\\ChattingButton\\ChattingButton.js":"10","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\ErrorMessage\\ErrorMessage.js":"11","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Spinner\\Spinner.js":"12","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\LoginForm\\LoginForm.js":"13"},{"size":593,"mtime":1610289810921,"results":"14","hashOfConfig":"15"},{"size":476,"mtime":1610305160385,"results":"16","hashOfConfig":"15"},{"size":362,"mtime":1606559614101,"results":"17","hashOfConfig":"15"},{"size":307,"mtime":1610126305415,"results":"18","hashOfConfig":"15"},{"size":7066,"mtime":1610319283492,"results":"19","hashOfConfig":"15"},{"size":745,"mtime":1610322458051,"results":"20","hashOfConfig":"15"},{"size":476,"mtime":1610275495155,"results":"21","hashOfConfig":"15"},{"size":745,"mtime":1610275529165,"results":"22","hashOfConfig":"15"},{"size":662,"mtime":1610275504719,"results":"23","hashOfConfig":"15"},{"size":341,"mtime":1610275514151,"results":"24","hashOfConfig":"15"},{"size":1702,"mtime":1610308921785,"results":"25","hashOfConfig":"15"},{"size":169,"mtime":1610287636849,"results":"26","hashOfConfig":"15"},{"size":2827,"mtime":1610308934406,"results":"27","hashOfConfig":"15"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},"18kyv50",{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"37","messages":"38","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39","usedDeprecatedRules":"30"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"46","usedDeprecatedRules":"30"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"30"},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"58","usedDeprecatedRules":"30"},"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\index.js",[],["59","60"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\App.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\reportWebVitals.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\sidebarItem\\sidebarItem.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\Messenger.js",["61","62","63","64","65","66"],"import React, { Component } from \"react\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport Message from \"../../components/Message/Message\";\r\nimport InputField from \"../../components/UI/ChatInputField/ChatInputField\";\r\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport classes from \"./Messenger.module.css\";\r\n\r\nexport class Messenger extends Component {\r\n  // data - chatting data that is received from backend\r\n  // by default, when first loads,\r\n  // messenger displays first chat (received from backend data array) in Messaging section\r\n  // therefore selectedChat by default is 0\r\n  // newMessage - this is text that user types in input field\r\n  // error - HTTP request error\r\n\r\n  state = {\r\n    data: [],\r\n    selectedChat: 0,\r\n    newMessage: null,\r\n    error: null,\r\n  };\r\n\r\n  // when component mounts,\r\n  // componnetDidMount sends HTTP request to get\r\n  // chatting data (contact names and chats) from backend,\r\n  // chatting data is then saved as state object\r\n  componentDidMount() {\r\n    let req = new XMLHttpRequest();\r\n\r\n    req.onreadystatechange = () => {\r\n      if (req.readyState == XMLHttpRequest.DONE) {\r\n        let dataUpdated = [];\r\n        if (req.status == 200) {\r\n          dataUpdated = [...JSON.parse(req.responseText)[\"data\"]];\r\n        }\r\n        this.checkRequestStatusUpdateState(req, dataUpdated);\r\n      }\r\n    };\r\n\r\n    req.open(\"GET\", process.env.REACT_APP_GET_SIDEBAR_CHATS, true);\r\n    req.setRequestHeader(\r\n      \"secret-key\",\r\n      \"$2b$10$L4eDTWs0EhRwLDrvJBmSOOZsCgkL103QHaarkuvKEzURiZrOyqA.y\"\r\n    );\r\n    req.send();\r\n  }\r\n\r\n  checkRequestStatusUpdateState = (req, newData) => {\r\n    if (req.status !== 200) {\r\n      this.setState({ error: JSON.parse(req.response).message });\r\n    } else {\r\n      this.setState({\r\n        data: newData,\r\n        newMessage: \"\",\r\n        error: null,\r\n      });\r\n    }\r\n  };\r\n  // when user clicks on a contact name in the Sidebar,\r\n  // selectChat function updates selectedChat property in state\r\n  // therefore, messagingSection array\r\n  // updates and displays chat with selected user\r\n  selectChat = (index) => {\r\n    this.setState({ selectedChat: index });\r\n  };\r\n\r\n  // updates newMessage property in state object\r\n  // when user starts typing new message into InputField\r\n  inputChangedHandler = (event) => {\r\n    event.preventDefault();\r\n    this.setState({ newMessage: event.target.value });\r\n  };\r\n\r\n  // function for creating timestamps that are used as\r\n  // IDs for new nessages\r\n  createTimeStamp = () => {\r\n    let now = new Date();\r\n    let timestamp = now.getFullYear().toString();\r\n    timestamp += (now.getMonth < 9 ? \"0\" : \"\") + now.getMonth().toString() + 1; // JS months are 0-based\r\n    timestamp += (now.getDate() < 10 ? \"0\" : \"\") + now.getDate().toString();\r\n    timestamp += (now.getHours < 10 ? \"0\" : \"\") + now.getHours().toString();\r\n    timestamp +=\r\n      (now.getMinutes() < 10 ? \"0\" : \"\") + now.getMinutes().toString();\r\n    timestamp +=\r\n      (now.getSeconds() < 10 ? \"0\" : \"\") + now.getSeconds().toString();\r\n\r\n    if (now.getMilliseconds() < 10) {\r\n      timestamp += \"00\" + now.getMilliseconds().toString();\r\n    } else if (now.getMilliseconds() < 100) {\r\n      timestamp += \"0\" + now.getMilliseconds().toString();\r\n    } else {\r\n      timestamp += now.getMilliseconds().toString();\r\n    }\r\n\r\n    return timestamp;\r\n  };\r\n\r\n  //checks if newMessage is not empty, updates backend and UI\r\n  sendMessage = () => {\r\n    if (this.state.newMessage && !this.state.error) {\r\n      let timestamp = this.createTimeStamp();\r\n      let newMessageObj = {\r\n        messageText: this.state.newMessage,\r\n        author: \"me\",\r\n        date: timestamp,\r\n      };\r\n      let newData = [];\r\n\r\n      //deeply copying and updating state data\r\n      for (let i = 0; i < this.state.data.length; i++) {\r\n        let deepCopy = [];\r\n        let updatedPerson = {};\r\n\r\n        for (let z = 0; z < Object.values(this.state.data[i])[0].length; z++) {\r\n          deepCopy.push(Object.values(this.state.data[i])[0][z]);\r\n        }\r\n\r\n        if (i == this.state.selectedChat) {\r\n          deepCopy.push(newMessageObj);\r\n        }\r\n\r\n        let person = Object.keys(this.state.data[i])[0];\r\n        updatedPerson = {\r\n          [person]: deepCopy,\r\n        };\r\n        newData.push(updatedPerson);\r\n      }\r\n\r\n      let newDataObj = {\r\n        data: newData,\r\n      };\r\n\r\n      let newDataJson = JSON.stringify(newDataObj);\r\n\r\n      let req = new XMLHttpRequest();\r\n\r\n      req.onreadystatechange = () => {\r\n        if (req.readyState == XMLHttpRequest.DONE) {\r\n          this.checkRequestStatusUpdateState(req, newData);\r\n        }\r\n      };\r\n\r\n      req.open(\"PUT\", process.env.REACT_APP_GET_SIDEBAR_CHATS, true);\r\n      req.setRequestHeader(\"Content-Type\", \"application/json\");\r\n      req.setRequestHeader(\"versioning\", \"false\");\r\n      req.setRequestHeader(\r\n        \"secret-key\",\r\n        \"$2b$10$L4eDTWs0EhRwLDrvJBmSOOZsCgkL103QHaarkuvKEzURiZrOyqA.y\"\r\n      );\r\n      req.send(newDataJson);\r\n    }\r\n  };\r\n\r\n  resetError = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  render() {\r\n    // in thes isdebar messenger contacts are being displayed\r\n    // sidebar is on the left of the page.\r\n    // messaging section (that contains chat with selected contact)\r\n    // is being displayed on the right side of the page\r\n\r\n    let messagingSection = [];\r\n\r\n    if (this.state.data.length > 0) {\r\n      let chat = [\r\n        ...Object.values(this.state.data[this.state.selectedChat])[0],\r\n      ];\r\n      chat.map((chatItem, index) =>\r\n        messagingSection.push(\r\n          <Message\r\n            author={chatItem.author}\r\n            messageText={chatItem.messageText}\r\n            key={index}\r\n          />\r\n        )\r\n      );\r\n    }\r\n\r\n    let chat = null;\r\n    if (this.state.data.length > 0) {\r\n      chat = (\r\n        <div>\r\n        <div className={classes.chatComponent}>\r\n          \r\n          <div className={classes.sidebar}>\r\n            <Sidebar data={this.state.data} selectChat={this.selectChat} />\r\n          </div>\r\n\r\n      \r\n           <div className={classes.messagingSection}> \r\n           <div className={classes.messagingSectionMessages}>{messagingSection}</div>\r\n            <InputField\r\n              inputChangedHandler={this.inputChangedHandler}\r\n              sendMessage={this.sendMessage}\r\n            />\r\n             </div>\r\n       \r\n          </div>\r\n          <ErrorMessage\r\n            error={this.state.error}\r\n            resetError={this.resetError}\r\n            errorType={\"error\"}\r\n          />\r\n        </div>\r\n      );\r\n    } else if (this.state.data.length == 0 && !this.state.error) {\r\n      chat = <Spinner />;\r\n    } else if (this.state.data.length == 0 && this.state.error) {\r\n      chat = (\r\n        <ErrorMessage\r\n          error={this.state.error}\r\n          resetError={this.resetError}\r\n          errorType={\"error\"}\r\n        />\r\n      );\r\n    }\r\n\r\n    return <div >{chat}</div>;\r\n  }\r\n}\r\n\r\nexport default Messenger;\r\n","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarItem\\SidebarItem.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Message\\Message.js",["67"],"import React from \"react\";\r\nimport classes from \"./Message.module.css\";\r\n\r\nexport const message = (props) => {\r\n  // this component receives\r\n  // props from Messenger statefull component\r\n  // and displays single user message\r\n\r\n  let me;\r\n\r\n  props.author == \"me\" ? (me = true) : (me = false);\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        me\r\n          ? `${classes.textDiv} ${classes.myTextDiv}`\r\n          : `${classes.textDiv} ${classes.notMyTextDiv}`\r\n      }\r\n    >\r\n      <div\r\n        className={\r\n          me\r\n            ? `${classes.text} ${classes.myText}`\r\n            : `${classes.text} ${classes.notMyText}`\r\n        }\r\n      >\r\n        {props.messageText}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default message;\r\n","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ChatInputField\\ChatInputField.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\Buttons\\ChattingButton\\ChattingButton.js",[],["68","69"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\ErrorMessage\\ErrorMessage.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Spinner\\Spinner.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\LoginForm\\LoginForm.js",["70"],"import React, { Component } from \"react\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\r\nimport classes from \"./LoginForm.module.css\";\r\n\r\nexport class LoginForm extends Component {\r\n  state = {\r\n    email: \"\",\r\n    password: \"\",\r\n    isValid: false,\r\n    error: null,\r\n  };\r\n\r\n  inputChangedHandler = (event, inputName) => {\r\n    event.preventDefault();\r\n    this.setState({ [inputName]: event.target.value });\r\n  };\r\n\r\n  validateLoginData = () => {\r\n    let isValid = true;\r\n\r\n    const pattern = /[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?/;\r\n    isValid = pattern.test(this.state.email) && isValid;\r\n    console.log(\"validateLogin \", isValid);\r\n\r\n    if (this.state.password.length > 0) {\r\n      isValid = true && isValid;\r\n    }\r\n    console.log(\"validate email \", isValid);\r\n\r\n    if (isValid) {\r\n      this.setState({ isValid: isValid });\r\n    } else {\r\n      this.setState({\r\n        isValid: isValid,\r\n        error: \"Please enter email and password\",\r\n      });\r\n    }\r\n  };\r\n\r\n  submitHandler = (event) => {\r\n    event.preventDefault();\r\n    this.validateLoginData();\r\n  };\r\n\r\n  resetError = () => {\r\n    this.setState({ error: null });\r\n  };\r\n\r\n  render() {\r\n    let inputs = (\r\n      <div>\r\n        <div>\r\n          <input\r\n            className={classes.formInput}\r\n            type=\"email\"\r\n            placeholder=\"Mail Address\"\r\n            value={this.state.email}\r\n            onChange={(event) => this.inputChangedHandler(event, \"email\")}\r\n          />\r\n        </div>\r\n\r\n        <input\r\n          className={classes.formInput}\r\n          type=\"password\"\r\n          placeholder=\"Password\"\r\n          value={this.state.password}\r\n          onChange={(event) => this.inputChangedHandler(event, \"password\")}\r\n        />\r\n      </div>\r\n    );\r\n\r\n    let form = (\r\n      <div className={classes.container}>\r\n        <div>\r\n          <div className={classes.formTitle}>Login</div>\r\n          {inputs}\r\n          <button\r\n            className={classes.formButton}\r\n            type=\"submit\"\r\n            onClick={this.submitHandler}\r\n          >\r\n            LOGIN\r\n          </button>\r\n        </div>\r\n      </div>\r\n    );\r\n\r\n    let chatRedirect = null;\r\n\r\n    if (this.state.isValid) {\r\n      chatRedirect = <Redirect to={\"/messenger\"} />;\r\n      console.log(\"suthredirect \");\r\n    }\r\n\r\n    return (\r\n      <div className={classes.formContainer}>\r\n        {chatRedirect}\r\n        {form}\r\n        <ErrorMessage\r\n          error={this.state.error}\r\n          errorType={\"warning\"}\r\n          resetError={this.resetError}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoginForm;\r\n",{"ruleId":"71","replacedBy":"72"},{"ruleId":"73","replacedBy":"74"},{"ruleId":"75","severity":1,"message":"76","line":32,"column":26,"nodeType":"77","messageId":"78","endLine":32,"endColumn":28},{"ruleId":"75","severity":1,"message":"76","line":34,"column":24,"nodeType":"77","messageId":"78","endLine":34,"endColumn":26},{"ruleId":"75","severity":1,"message":"76","line":119,"column":15,"nodeType":"77","messageId":"78","endLine":119,"endColumn":17},{"ruleId":"75","severity":1,"message":"76","line":139,"column":28,"nodeType":"77","messageId":"78","endLine":139,"endColumn":30},{"ruleId":"75","severity":1,"message":"76","line":209,"column":39,"nodeType":"77","messageId":"78","endLine":209,"endColumn":41},{"ruleId":"75","severity":1,"message":"76","line":211,"column":39,"nodeType":"77","messageId":"78","endLine":211,"endColumn":41},{"ruleId":"75","severity":1,"message":"76","line":11,"column":16,"nodeType":"77","messageId":"78","endLine":11,"endColumn":18},{"ruleId":"71","replacedBy":"79"},{"ruleId":"73","replacedBy":"80"},{"ruleId":"81","severity":1,"message":"82","line":3,"column":8,"nodeType":"83","messageId":"84","endLine":3,"endColumn":15},"no-native-reassign",["85"],"no-negated-in-lhs",["86"],"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected",["85"],["86"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]