[{"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\index.js":"1","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\App.js":"2","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\reportWebVitals.js":"3","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\sidebarItem\\sidebarItem.js":"4","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Sidebar\\Sidebar.js":"5","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarItem\\SidebarItem.js":"6","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Message\\Message.js":"7","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ChatInputField\\ChatInputField.js":"8","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\ErrorMessage\\ErrorMessage.js":"9","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Spinner\\Spinner.js":"10","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\LoginForm\\LoginForm.js":"11","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Navbar\\Navbar.js":"12","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\reducers\\reducer.js":"13","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actionTypes.js":"14","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\index.js":"15","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actions.js":"16","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\MyProfile\\MyProfile.js":"17","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ProfileDetails\\ProfileDetails.js":"18","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Utilities\\UtilityFunction.js":"19","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarInputField\\SidebarInputField.js":"20","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\service.js":"21","C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\Messenger.jsx":"22"},{"size":1023,"mtime":1610924030565,"results":"23","hashOfConfig":"24"},{"size":634,"mtime":1610924024199,"results":"25","hashOfConfig":"24"},{"size":362,"mtime":1606559614101,"results":"26","hashOfConfig":"24"},{"size":307,"mtime":1610126305415,"results":"27","hashOfConfig":"24"},{"size":1435,"mtime":1613909948423,"results":"28","hashOfConfig":"24"},{"size":545,"mtime":1610921526195,"results":"29","hashOfConfig":"24"},{"size":746,"mtime":1613913964839,"results":"30","hashOfConfig":"24"},{"size":1066,"mtime":1610922121302,"results":"31","hashOfConfig":"24"},{"size":3274,"mtime":1613913959617,"results":"32","hashOfConfig":"24"},{"size":169,"mtime":1610287636849,"results":"33","hashOfConfig":"24"},{"size":4304,"mtime":1610923967333,"results":"34","hashOfConfig":"24"},{"size":2330,"mtime":1613910092104,"results":"35","hashOfConfig":"24"},{"size":648,"mtime":1610924020848,"results":"36","hashOfConfig":"24"},{"size":90,"mtime":1610924012529,"results":"37","hashOfConfig":"24"},{"size":55,"mtime":1610924016192,"results":"38","hashOfConfig":"24"},{"size":300,"mtime":1610924008465,"results":"39","hashOfConfig":"24"},{"size":4071,"mtime":1610917728823,"results":"40","hashOfConfig":"24"},{"size":697,"mtime":1613913939646,"results":"41","hashOfConfig":"24"},{"size":220,"mtime":1610924044667,"results":"42","hashOfConfig":"24"},{"size":902,"mtime":1610921763059,"results":"43","hashOfConfig":"24"},{"size":1304,"mtime":1623414505075,"results":"44","hashOfConfig":"24"},{"size":11588,"mtime":1623414677198,"results":"45","hashOfConfig":"24"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},"18kyv50",{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"53"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"48"},"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\index.js",[],["94","95"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\App.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\reportWebVitals.js",[],["96","97"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\sidebarItem\\sidebarItem.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Sidebar\\Sidebar.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarItem\\SidebarItem.js",[],["98","99"],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Message\\Message.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ChatInputField\\ChatInputField.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\ErrorMessage\\ErrorMessage.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Spinner\\Spinner.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\LoginForm\\LoginForm.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Navbar\\Navbar.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\reducers\\reducer.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\index.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\store\\actions\\actions.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\MyProfile\\MyProfile.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\ProfileDetails\\ProfileDetails.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\Utilities\\UtilityFunction.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\components\\UI\\SidebarInputField\\SidebarInputField.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\service.js",[],"C:\\Users\\ASUS\\Documents\\React\\2020react05\\Portfolio\\Kilo\\messenger\\src\\containers\\Messenger\\Messenger.jsx",["100","101"],"import React, { Component } from \"react\";\r\nimport Sidebar from \"../../components/Sidebar/Sidebar\";\r\nimport InputField from \"../../components/UI/ChatInputField/ChatInputField\";\r\nimport ErrorMessage from \"../../components/ErrorMessage/ErrorMessage\";\r\nimport Spinner from \"../../components/Spinner/Spinner\";\r\nimport Navbar from \"../../components/Navbar/Navbar\";\r\nimport axios from \"axios\";\r\nimport { Redirect } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport classes from \"./Messenger.module.css\";\r\nimport {\r\n  createMessagingSection,\r\n  createErrorMessage,\r\n  createSpinner,\r\n} from \"./service\";\r\n\r\nexport class Messenger extends Component {\r\n  // data - chatting data that is received from backend\r\n  // by default, when first loads,\r\n  // messenger displays first chat (received from backend data array) in Messaging section\r\n  // therefore selectedChat by default is 0\r\n  // newMessage - this is text that user types in input field\r\n  // newContact - text that user types in Sidebar input field when adding new contact\r\n  // errorLoadingChats - HTTP GET request error\r\n  // errorSendingMessage - HTTP POST request error\r\n  // errorAddingContact - HTTP POST request error\r\n  // errorSendingMessage and errorAddingContact differ in css\r\n  // showSidebar - used in mobile responsie devices, when switching between sidebar view and chat view\r\n\r\n  state = {\r\n    data: null,\r\n    selectedChat: 0,\r\n    newMessage: \"\",\r\n    newContact: \"\",\r\n    errorLoadingChats: null,\r\n    errorSendingMessage: null,\r\n    errorAddingContact: null,\r\n    showSidebar: true,\r\n  };\r\n\r\n  chatsDataGetRequest = () => {\r\n    let useHeaders = {\r\n      headers: {\r\n        \"secret-key\": process.env.REACT_APP_API_KEY,\r\n      },\r\n    };\r\n    axios\r\n      .get(process.env.REACT_APP_GET_CHATS, useHeaders)\r\n      .then((response) => {\r\n        let dataUpdated = [];\r\n        dataUpdated = JSON.parse(JSON.stringify(response.data[\"data\"]));\r\n\r\n        this.checkRequestStatusUpdateState(\r\n          response,\r\n          dataUpdated,\r\n          \"errorLoadingChats\",\r\n          \"do not clear input\"\r\n        );\r\n      })\r\n      .catch((error) => {\r\n        this.checkRequestStatusUpdateState(\r\n          error.response,\r\n          null,\r\n          \"errorLoadingChats\",\r\n          \"do not clear input\"\r\n        );\r\n      });\r\n  };\r\n\r\n  sendPutRequest = (newData, clearInput, updateError) => {\r\n    let newDataObj = {\r\n      data: newData,\r\n    };\r\n\r\n    let newDataJson = JSON.stringify(newDataObj);\r\n\r\n    let useHeaders = {\r\n      headers: {\r\n        \"secret-key\": process.env.REACT_APP_API_KEY,\r\n        \"Content-Type\": \"application/json\",\r\n        versioning: \"false\",\r\n      },\r\n    };\r\n\r\n    axios\r\n      .put(process.env.REACT_APP_GET_CHATS, newDataJson, useHeaders)\r\n      .then((response) => {\r\n        this.checkRequestStatusUpdateState(\r\n          response,\r\n          newData,\r\n          updateError,\r\n          clearInput\r\n        );\r\n      })\r\n\r\n      .catch((error) => {\r\n        console.log(error);\r\n        this.checkRequestStatusUpdateState(\r\n          error.response,\r\n          null,\r\n          updateError,\r\n          clearInput\r\n        );\r\n      });\r\n  };\r\n\r\n  // this.sendContinuousRequestsUpdateChats function is used for updating this.state.data\r\n  // and chat UI if there are any new messages sent by other users. It is set to execute every 2s.\r\n  // this.sendContinuousRequestsUpdateChats is eliminated, when Messenger component unmounts.\r\n  // currently this.sendContinuousRequestsUpdateChats  and componentWillUnmount are commented\r\n  // to prevent exceeding amount of free requests of JSONbin.io\r\n  componentDidMount() {\r\n    if (this.props.email !== null && this.props.password !== null) {\r\n      this.chatsDataGetRequest();\r\n    }\r\n    //  this.sendContinuousRequestsUpdateChats = setInterval(() => {\r\n    //   this.chatsDataGetRequest();\r\n    // }, 2000);\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    if (\r\n      this.props.email !== null &&\r\n      this.props.password !== null &&\r\n      this.state.data\r\n    ) {\r\n      this.scrollToBottom();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    //  clearInterval(this.sendContinuousRequestsUpdateChats);\r\n  }\r\n\r\n  checkRequestStatusUpdateState = (req, newData, error, clearInput) => {\r\n    // if request status !=200 , this.state.data does not update, one of error properties in state updates\r\n    // when fetching data from backend, emptying user's input fields in UI is undesirable, therefore it is not updated with setState\r\n    // when sending new text message, we want to clear input field after successful request (set this.state.newMessage=\"\")\r\n    // after new contact is added, we want to  clear input field after successful request (set this.state.newContact=\"\")\r\n    if (req.status !== 200) {\r\n      this.setState({ [error]: req[\"data\"][\"message\"] });\r\n      // this.setState({ [error]: JSON.parse(req.response).message });\r\n    } else if (clearInput === \"do not clear input\") {\r\n      this.setState({\r\n        data: newData,\r\n        [error]: null,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        data: newData,\r\n        [clearInput]: \"\",\r\n        [error]: null,\r\n      });\r\n    }\r\n  };\r\n\r\n  // when user clicks on a contact name in the Sidebar,\r\n  // selectChat function updates selectedChat property in state\r\n  // therefore, messagingSection array\r\n  // updates and displays chat with selected user\r\n  selectChat = (index) => {\r\n    this.setState({ selectedChat: index });\r\n\r\n    // following function hides sidebar on mobile devices\r\n    // when this.state.showSidebar is false,\r\n    // Sidebar is assigned CSS class with display: none property\r\n    this.hideSidebar();\r\n  };\r\n\r\n  // updates newMessage property in state object\r\n  // when user starts typing new message or adding new contact into textarea or input field\r\n  inputChangedHandler = (event, inputName) => {\r\n    event.preventDefault();\r\n    this.setState({ [inputName]: event.target.value });\r\n  };\r\n\r\n  //checks if this.state.newMessage is not empty, sends HTTP reqiest, updates backend and UI\r\n  sendMessage = () => {\r\n    if (this.state.newMessage && !this.state.errorSendingMessage) {\r\n      let timestamp = this.createTimeStamp();\r\n      let newMessageObj = {\r\n        messageText: this.state.newMessage,\r\n        author: \"me\",\r\n        date: timestamp,\r\n      };\r\n\r\n      let newData = JSON.parse(JSON.stringify(this.state.data));\r\n      let contactName = Object.keys(this.state.data[this.state.selectedChat]);\r\n      newData[this.state.selectedChat][contactName].push(newMessageObj);\r\n\r\n      this.sendPutRequest(newData, \"newMessage\", \"errorSendingMessage\");\r\n    }\r\n  };\r\n\r\n  //checks if this.state.newContact is not empty, updates backend and UI\r\n  addNewContact = () => {\r\n    if (this.state.newContact !== \"\") {\r\n      let newData = JSON.parse(JSON.stringify(this.state.data));\r\n      let newContactData = { [this.state.newContact]: [] };\r\n      newData.splice(0, 0, newContactData);\r\n      this.sendPutRequest(newData, \"newContact\", \"errorAddingContact\");\r\n    }\r\n  };\r\n\r\n  resetError = (errorType) => {\r\n    this.setState({ [errorType]: null });\r\n  };\r\n\r\n  // showSidebarFunction and hideSidebar are used in mobile devices for switching\r\n  // between sidebar view and chat view\r\n  showSidebarFunction = () => {\r\n    this.setState({ showSidebar: true });\r\n  };\r\n\r\n  hideSidebar = () => {\r\n    this.setState({ showSidebar: false });\r\n  };\r\n\r\n  scrollToBottom = () => {\r\n    this.messagesEnd.scrollIntoView({ behavior: \"smooth\" });\r\n  };\r\n\r\n  render() {\r\n    // in the Sidebar, messenger contacts are being displayed\r\n    // Sidebar is on the left of the page.\r\n    // Messaging section (that contains chat with selected contact)\r\n    // is being displayed on the right side of the page\r\n\r\n    const messagingSection = createMessagingSection(\r\n      this.state.data,\r\n      this.state.selectedChat\r\n    );\r\n\r\n    let chat = null;\r\n    // user logs in by providing email and password\r\n    // if user tries to access Messenger component\r\n    // without logging in first,\r\n    // user is being redirected to LoginForm component\r\n\r\n    let redirectToLogin = null;\r\n    if (!this.props.email || !this.props.password) {\r\n      redirectToLogin = <Redirect to=\"/\" />;\r\n    }\r\n\r\n    if (this.state.data !== null) {\r\n      chat = (\r\n        <div>\r\n          <div className={classes.chatComponent}>\r\n            <div\r\n              className={\r\n                this.state.showSidebar\r\n                  ? `${classes.sidebar} ${classes.sidebarPhoneDisplay}`\r\n                  : `${classes.sidebar} ${classes.sidebarPhoneNone}`\r\n              }\r\n            >\r\n              <div className={classes.navbarOfSidbarForMobile}>\r\n                <Navbar\r\n                  navigateTo={\"/myProfile\"}\r\n                  chatWith={\r\n                    Object.keys(this.state.data[this.state.selectedChat])[0]\r\n                  }\r\n                  showSidebarProperty={this.state.showSidebar}\r\n                  showSidebarFunction={this.showSidebarFunction}\r\n                />\r\n              </div>\r\n              <Sidebar\r\n                data={this.state.data}\r\n                selectChat={this.selectChat}\r\n                selectedChat={this.state.selectedChat}\r\n                inputChangedHandler={this.inputChangedHandler}\r\n                newContact={this.state.newContact}\r\n                addNewContact={this.addNewContact}\r\n                errorAddingContact={this.state.errorAddingContact}\r\n                resetError={this.resetError}\r\n                errorType={\"errorAddingContact\"}\r\n              />\r\n            </div>\r\n\r\n            <div\r\n              className={\r\n                this.state.showSidebar\r\n                  ? `${classes.messagingSection} ${classes.messagingSectionPhoneNone}`\r\n                  : `${classes.messagingSection} ${classes.messagingSectionPhoneDisplay}`\r\n              }\r\n            >\r\n              <Navbar\r\n                navigateTo={\"/myProfile\"}\r\n                chatWith={\r\n                  Object.keys(this.state.data[this.state.selectedChat])[0]\r\n                }\r\n                showSidebarProperty={this.state.showSidebar}\r\n                showSidebarFunction={this.showSidebarFunction}\r\n              />\r\n              <div className={classes.messagingSectionMessages}>\r\n                {createMessagingSection(\r\n                  this.state.data,\r\n                  this.state.selectedChat\r\n                )}\r\n                <div\r\n                  ref={(el) => {\r\n                    this.messagesEnd = el;\r\n                  }}\r\n                >\r\n                  {\" \"}\r\n                </div>\r\n              </div>\r\n              <ErrorMessage\r\n                error={this.state.errorSendingMessage}\r\n                resetError={this.resetError}\r\n                errorType={\"errorSendingMessage\"}\r\n              />\r\n              <InputField\r\n                inputChangedHandler={(event) =>\r\n                  this.inputChangedHandler(event, \"newMessage\")\r\n                }\r\n                sendMessage={this.sendMessage}\r\n                newMessage={this.state.newMessage}\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        {redirectToLogin}\r\n        {chat}\r\n        {createErrorMessage(this.state.errorLoadingChats)}\r\n        {createSpinner(this.state.data, this.state.errorLoadingChats)}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    email: state.email,\r\n    password: state.password,\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps)(Messenger);\r\n",{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","replacedBy":"105"},{"ruleId":"102","replacedBy":"106"},{"ruleId":"104","replacedBy":"107"},{"ruleId":"102","replacedBy":"108"},{"ruleId":"104","replacedBy":"109"},{"ruleId":"110","severity":1,"message":"111","line":5,"column":8,"nodeType":"112","messageId":"113","endLine":5,"endColumn":15},{"ruleId":"110","severity":1,"message":"114","line":229,"column":11,"nodeType":"112","messageId":"113","endLine":229,"endColumn":27},"no-native-reassign",["115"],"no-negated-in-lhs",["116"],["115"],["116"],["115"],["116"],"no-unused-vars","'Spinner' is defined but never used.","Identifier","unusedVar","'messagingSection' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]